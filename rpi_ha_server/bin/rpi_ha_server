#!/usr/bin/env python3
from AWSIoTPythonSDK.MQTTLib import AWSIoTMQTTClient
import time
import argparse
import json
import socket
import threading
import time
import os
import sys
import datetime
import queue

global gVar
global ledLight
global awsPublisher
global pubMsg

HEADER = '\033[95m'
OKBLUE = '\033[94m'
OKCYAN = '\033[96m'
OKGREEN = '\033[92m'
OKYELLOW = '\033[93m'
OKRED = '\033[91m'
ENDC = '\033[0m'
BOLD = '\033[1m'
UNDERLINE = '\033[4m'
    
def customCallback(client, userdata, message):
    print("Received a new message: ")
    print(message.payload)
    print("from topic: ")
    print(message.topic)
    print("--------------\n\n")

def print_msg(data=''):
    th = threading.current_thread()
    try:
        colour = th.mColour
    except Exception as ignore:
        colour = OKRED
    print(colour + "[{}]\t".format(th.getName()) + data + ENDC)
    
class global_var():
    def __init__(self):
        self.gKeepRunning = 1
        self.pplCnt = 0
        self.syncLock = threading.Lock()

class pub_msg():
    def __init__(self):
        self.syncLock = threading.Lock()
        self.mEventQueue = queue.Queue()
        self.startTime = None
        self.endTime = None
        self.pplCnt = None
        self.curTime = None
        
class led_light(threading.Thread):
    global gVar
    global pubMsg
    def __init__(self):
        threading.Thread.__init__(self)
        self.mColour = OKYELLOW
        self.mPplCnt = 0
        self.mEventQueue = queue.Queue()
        self.setName("Light Handler")
        self.start()
        
    def run(self):
        evId = None
        while gVar.gKeepRunning:
            try:
                curCnt = self.mEventQueue.get(timeout=1)
            except queue.Empty as timeout:
                continue
            else:
                if curCnt == self.mPplCnt:
                    continue
                
                pubMsg.syncLock.acquire()
                pubMsg.curTime =  datetime.datetime.now()
                if curCnt > self.mPplCnt:
                    print_msg("someone entered in room at [{}]".format(pubMsg.curTime))
                else:
                    print_msg("someone exited from room at [{}]".format(pubMsg.curTime))
                
                if 0 == self.mPplCnt:
                    evId = 0
                elif 0 == curCnt:
                    evId = 1
                else:
                    evId = -1
                if -1 != evId:
                    pubMsg.mEventQueue.put(evId)
                pubMsg.syncLock.release()
                
                self.mPplCnt =  curCnt
    
    def get_current_status(self):
        if 0 == self.mPplCnt:
            return "no one is there in the room, light is off"
        curTm = datetime.datetime.now()
        return "there are {} person(s) present in room, light is on since {} seconds".format(
                self.mPplCnt, curTm.timestamp()-self.startTm.timestamp())

class client_socket(threading.Thread):
    global gVar
    global ledLight
    
    def __init__(self, clientSock, clientAddr):
        threading.Thread.__init__(self)
        self.mColour = OKGREEN
        self.mSock = clientSock
        self.mAddr = clientAddr
        self.mSock.settimeout(1)
        self.setName("sensor-{}".format(self.mAddr[1]))
        self.start()
        
    def run(self):
        while gVar.gKeepRunning:
            try:
                sockData = self.mSock.recv(1024)
            except socket.timeout as timeOut:
                continue
            except socket.error as SockErr:
                print_msg("failed to accept connections")
                break
            else:
                event = sockData.decode()
                if 0 == len(event):
                    print_msg("sensor connection is closed")
                    break
                if self.hndl_event(event):
                    break

        print_msg("closing local connection for sensor {}".format(self.mAddr))
        self.mSock.close()
        
    def hndl_event(self, event):
        if '1' == event:
            gVar.syncLock.acquire()
            if 10 == gVar.pplCnt:
                resp = "only {} person can enter the room".format(gVar.pplCnt)
            else:
                gVar.pplCnt += 1
                ledLight.mEventQueue.put(gVar.pplCnt)
                resp = "person entered, total[{}]".format(gVar.pplCnt)
            gVar.syncLock.release()
        elif '2' == event:
            gVar.syncLock.acquire()
            if 0 == gVar.pplCnt:
                resp = "there's no one in the room"
            else:
                gVar.pplCnt -= 1
                ledLight.mEventQueue.put(gVar.pplCnt)
                resp = "person exited,total[{}]".format(gVar.pplCnt)
            gVar.syncLock.release()
        elif '3' == event:
            gVar.syncLock.acquire()
            resp = ledLight.get_current_status()
            gVar.syncLock.release()
        else:
            resp = "bad event {}".format(event)
            
        try:
            self.mSock.send(resp.encode())
        except socket.error as sockErr:
            print_msg("failed to send resp,err[{}]".format(sockErr))
            return 1
        print_msg("client[{}] event[{}] response[{}]".format(self.mAddr, event, resp))
        return 0

class server_socket(threading.Thread):
    global gVar
    global ledLight
    
    host = ''
    port = 0
    clientList = []
    
    def __init__(self):
        threading.Thread.__init__(self)
        self.mColour = OKBLUE
        self.setName("rpi-server")
        try:
            self.serverSock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.serverSock.bind((self.host, self.port))
            self.serverSock.listen()
            self.serverSock.settimeout(1)
        except socket.error as sockErr:
            print_msg("failed to create server sock,err[{}]".format(sockErr))
            self.serverSock.close()
            return
        
        print_msg("socket created successfully [{}]".format(self.serverSock))
        self.start()
    
    def run(self):        
        while gVar.gKeepRunning:
            try:
                clientSock, clientAddr = self.serverSock.accept()
            except socket.timeout as timeOut:
                continue
            except socket.error as SockErr:
                print_msg("failed to accept connections, exiting !!!")
                break
            else:
                print_msg("connected from [{}]".format(clientAddr))
                self.clientList.append(client_socket(clientSock, clientAddr))
        
        for clientTh in self.clientList:
            clientTh.join()
        self.serverSock.close()

class aws_publisher(threading.Thread):
    global gVar
    global ledLight
    global pubMsg
    
    host = ''
    port = 0
    clientList = []
    
    def __init__(self, host, rootCAPath, certificatePath, privateKeyPath):
        threading.Thread.__init__(self)
        self.mColour = OKYELLOW
        self.setName("aws publisher")
        self.myAWSIoTMQTTClient = None
        self.clientId = "rpi_ha_server"
        try:
            self.myAWSIoTMQTTClient = AWSIoTMQTTClient(self.clientId)
            self.myAWSIoTMQTTClient.configureEndpoint(host, 8883)
            self.myAWSIoTMQTTClient.configureCredentials(rootCAPath, privateKeyPath, certificatePath)
            self.myAWSIoTMQTTClient.configureDrainingFrequency(2)  # Draining: 2 Hz
            self.myAWSIoTMQTTClient.configureConnectDisconnectTimeout(10)  # 10 sec
            self.myAWSIoTMQTTClient.configureMQTTOperationTimeout(5)  # 5 sec
            # Connect and subscribe to AWS IoT
            self.myAWSIoTMQTTClient.connect()

        except Exception as initErr:
            print_msg("failed to create aws_publisher,err[{}]".format(initErr))
            return
        
        print_msg("aws_publisher created successfully")
        self.start()
    
    def run(self):  
        evId = None
        jsonData = None
        jsonStr = None
        while gVar.gKeepRunning:
            try:
                evId = pubMsg.mEventQueue.get(timeout=1)
            except queue.Empty as timeout:
                continue
            else:
                pubMsg.syncLock.acquire()
                if 0 == evId:
                    pubMsg.startTime = pubMsg.curTime
                    print_msg("".format(pubMsg.curTime))
                    jsonData = {
                            'start time': "".format(pubMsg.startTime)
                        }
                elif 1 == evId:
                    pubMsg.endTime = pubMsg.curTime
                    jsonData = {
                            'start time': "".format(pubMsg.startTime),
                            'end time': "".format(pubMsg.endTime)
                        }
                pubMsg.syncLock.release()
                jsonStr = json.dumps(jsonData)
                print_msg(jsonStr)
                self.myAWSIoTMQTTClient.publish('light_status',jsonStr,1)

def main():
    global gVar
    global ledLight
    global awsPublisher
    global pubMsg
    
    parser = argparse.ArgumentParser()
    parser.add_argument("-e", "--endpoint",
                        action="store", required=True,
                        dest="host", help="endpoint")
    parser.add_argument("-r", "--rootCA",
                        action="store", required=True,
                        dest="rootCAPath", help="path to root CA")
    parser.add_argument("-c", "--cert",
                        action="store", required=True,
                        dest="certificatePath", help="client certificate path")
    parser.add_argument("-k", "--key",
                        action="store", required=True,
                        dest="privateKeyPath", help="client certificate key")
    args = parser.parse_args()
    
    gVar = global_var()
    pubMsg = pub_msg()
    ledLight = led_light()
    awsPublisher = aws_publisher(host=args.host,
                                 rootCAPath=args.rootCAPath,
                                 certificatePath=args.certificatePath,
                                 privateKeyPath=args.privateKeyPath)

    tServerSock = server_socket()
    while gVar.gKeepRunning:
        try:
            time.sleep(1)
        except KeyboardInterrupt:
            print_msg("keyboard interrupt")
            gVar.gKeepRunning = 0
    tServerSock.join()

if __name__ == "__main__":
    main()
    try:
        sys.exit(0)
    except SystemExit:
        os._exit(0)